/*
  Program lnfill-u6 to handle LN filling and monitoring of Ge
  when RMS system is not available.

  Will put relevant data into shared memory where other programs
  can access it and decide actions such as turning off HV.

  Program will be based on LabJack U6 USB daq, dataport probe
  power strip with remote relay control.

*/

#include "LNfill.h";

/***********************************************************/
int main(int argc, char **argv){
/*
  key_t shmKey;
  int shmid;

  time_t curtime = -1;
  char xtime[40]="\0";
  long int size=4194304; //   = 4 MB // 131072;  //65536;
*/
  long int ii=0;
/*
  struct dewar {
    int onoff;                // 0=off, 1=on
    char name[10];            // name of detector; ORNL's are A1, B2, ...
    double rtd;               // temperature of detector
    double ovrflo;            // temperature of outlet
    double filltimestp;       // time between fills (seconds); usually 6-8 hours
    double filltimemax;       // time to wait before giving up this fill
    double filltimemin;       // time that at least has to go by for complete fill
    double filllast;          // last time there was a fill
    double fillnext;          // next time to start a fill
    char status[10];          // current status: COLD, WARM, FILL, ALARM
  };// ge[20];
  
  struct manifold {
    double pressure;          // pressure in the manifold line
    double rtd;               // temperature of manifold
    double cooltime;          // time to cool down the manifold
    double timeout;           // time to give up cooling
  };// tank; 

  struct lnfill {
    struct manifold tank;     // merge the two structures so that all can be loaded into shared memory segment
    struct dewar ge[20];
  } ln;

  struct lnfill *lnptr; 
*/
/*
  Shared memory creation and attachment
*/

  shmKey = ftok("/Users/gross/Desktop/LNfill/LNdata",'b');    // key unique identifier for shared memory, other programs use 'LN' tag
  shmid = shmget(shmKey, sizeof (struct lnfill), 0666 | IPC_CREAT); // gets the ID of shared memory, size, permissions, create if necessary
  lnptr = shmat (shmid, (void *)0, 0);                        // now link to area so it can be used; struct lnfill pointer char *lnptr
  if (lnptr == (struct lnfill *)(-1)){                        // check for errors
    perror("shmat");
    exit;
  }
  /*  

  */

  ln.ge[0].rtd = 80.2;

  for (ii=0; ii< 20; ii++){
    ln.ge[ii].rtd = ln.ge[0].rtd + (double) ii;
    lnptr->ge[ii].rtd = ln.ge[ii].rtd;
    printf ("rtd[%li] = %.2lf = %.2lf\n", ii, ln.ge[ii].rtd,lnptr->ge[ii].rtd);

    sleep (1);
  }

  shmdt(lnptr);                     // detach from shared memory segment

  //  shmctl(shmid, IPC_RMID, NULL);     // remove the shared memory segment hopefully forever

  return 0;
}
